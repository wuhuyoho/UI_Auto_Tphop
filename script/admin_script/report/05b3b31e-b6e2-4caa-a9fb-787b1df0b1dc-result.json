{"name": "test_add_goods", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location", "trace": "self = <selenium.webdriver.common.driver_finder.DriverFinder object at 0x000002CAABF96080>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n                output = SeleniumManager().binary_paths(self._to_args())\n                if Path(output[\"driver_path\"]).is_file():\n                    self._paths[\"driver_path\"] = output[\"driver_path\"]\n                else:\n                    raise ValueError(f'The driver path is not a valid file: {output[\"driver_path\"]}')\n                if Path(output[\"browser_path\"]).is_file():\n                    self._paths[\"browser_path\"] = output[\"browser_path\"]\n                else:\n>                   raise ValueError(f'The browser path is not a valid file: {output[\"browser_path\"]}')\nE                   ValueError: The browser path is not a valid file:\n\nD:\\Coder2\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:75: ValueError\n\nThe above exception was the direct cause of the following exception:\n\nself = <class 'script.admin_script.test_goods.TestAddGoods'>\n\n    def setup_class(self):\n        # 打开浏览器\n>       self.driver = DriverUtils.get_admin_driver()\n\ntest_goods.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\utils.py:53: in get_admin_driver\n    cls.__admin_driver = selenium.webdriver.Chrome()\nD:\\Coder2\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nD:\\Coder2\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:50: in __init__\n    if finder.get_browser_path():\nD:\\Coder2\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:47: in get_browser_path\n    return self._binary_paths()[\"browser_path\"]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.driver_finder.DriverFinder object at 0x000002CAABF96080>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n                output = SeleniumManager().binary_paths(self._to_args())\n                if Path(output[\"driver_path\"]).is_file():\n                    self._paths[\"driver_path\"] = output[\"driver_path\"]\n                else:\n                    raise ValueError(f'The driver path is not a valid file: {output[\"driver_path\"]}')\n                if Path(output[\"browser_path\"]).is_file():\n                    self._paths[\"browser_path\"] = output[\"browser_path\"]\n                else:\n                    raise ValueError(f'The browser path is not a valid file: {output[\"browser_path\"]}')\n        except Exception as err:\n            msg = f\"Unable to obtain driver for {browser}\"\n>           raise NoSuchDriverException(msg) from err\nE           selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\nD:\\Coder2\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:78: NoSuchDriverException"}, "attachments": [{"name": "log", "source": "b0b8ba83-e96b-42f1-9e4c-95be76674f64-attachment.txt", "type": "text/plain"}], "start": 1747795460509, "stop": 1747795460509, "uuid": "6b0883d2-34f6-4dc4-8c14-b812bcc498a5", "historyId": "a4601785cc582ecc037df0cb5fa92c01", "testCaseId": "a4601785cc582ecc037df0cb5fa92c01", "fullName": "script.admin_script.test_goods.TestAddGoods#test_add_goods", "labels": [{"name": "tag", "value": "run(order=3)"}, {"name": "parentSuite", "value": "script.admin_script"}, {"name": "suite", "value": "test_goods"}, {"name": "subSuite", "value": "TestAddGoods"}, {"name": "host", "value": "Marlatinda"}, {"name": "thread", "value": "13464-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "script.admin_script.test_goods"}]}